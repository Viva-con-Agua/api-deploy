#!/bin/bash

source .env


print_help() {
    echo "please script for handling the vca api docker"
    echo "Syntax: please [command] [options] [service/all]"
    echo "commands:"
    echo "  copy <service>    Copy a scripts. Helpfull and buggy"
    echo "  up [dev/prod]     Set up the api. Used DEPLOY_MODE from .env if no option is set"
    echo "  network           Initial docker network"
    echo "  initDev           Initial dev nginx"
}

init_dev(){
    mkdir -p ./config/nginx/dev/conf
    cp ./config/nginx/prod/conf/* ./config/nginx/dev/conf/
    mkdir -p ./config/nginx-admin/dev/conf
    cp ./config/nginx-admin/prod/conf/* ./config/nginx-admin/dev/conf/
    mkdir -p ${BACKUP_PATH}/{auth,run4w}
}

admin() {
    docker-compose exec auth-backend bash -c 'curl http://localhost:1323/admin/auth/app'
}


init_network() {
    docker network create -d bridge --subnet 172.4.8.0/21 domain_net ||
    docker network create -d bridge --subnet 172.4.16.0/21 db_net &&
    docker network create -d bridge --subnet 172.4.24.0/21 api_net
}

copyConfig() {
    cat ${REPO_PATH}/${1}/config/docker-compose.prod.yml >> docker-compose.api.yml &&
    cp ${REPO_PATH}/${1}/config/${1}.location ./config/nginx/conf/
}

print_up(){
    echo "DEPLOY_MODE not set or not supported. Use .env file or add dev/prod option."
}

switch_dev() {
    cp ./config/nginx/example/${1}.location ./config/nginx/dev/conf/${1}.location 
    cp ./config/nginx-admin/example/${1}.location ./config/nginx-admin/dev/conf/${1}.location
    docker-compose restart nginx
    docker-compose restart nginx-admin
}

switch_docker() {
    cp ./config/nginx/prod/conf/${1}.location ./config/nginx/dev/conf/${1}.location
    cp ./config/nginx-admin/prod/conf/${1}.location ./config/nginx-admin/dev/conf/${1}.location 
    docker-compose restart nginx
    docker-compose restart nginx-admin
}

backup() {
    dt=`date '+%d:%m:%Y_%H:%M'`
    docker-compose exec auth-db bash -c 'mongodump -d auth --archive' > ${BACKUP_PATH}/auth/auth.backup_${dt}.archive
}

switch() {
    case $1 in
        dev) switch_dev $2;;
        docker) switch_docker $2;;
        *)
    esac

}


up() {
    if [ -z ${1+x} ];
    then
        mode=${DEPLOY_MODE}
    else 
        mode=${1}
    fi
    case ${mode} in
        prod) docker-compose -f docker-compose.prod.yml -f docker-compose.live.yml up -d;;
        prod-dev) docker-compose -f docker-compose.prod.yml -f docker-compose.dev.yml up -d;;
        stage) docker-compose -f docker-compose.stage.yml -f docker-compose.live.yml up -d;;
        stage-dev) docker-compose -f docker-compose.stage.yml -f docker-compose.dev.yml up -d;;
        *) print_up
    esac
}

update() {
    if [ -z ${1+x} ];
    then
        mode=${DEPLOY_MODE}
    else 
        mode=${1}
    fi
    case ${mode} in
        prod) docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml -f docker-compose.live.yml up -d;;
        prod-dev)docker-compose -f docker-compose.prod.yml pull &&  docker-compose -f docker-compose.prod.yml -f docker-compose.dev.yml up -d;;
        stage) docker-compose -f docker-compose.stage.yml pull && docker-compose -f docker-compose.stage.yml -f docker-compose.live.yml up -d;;
        stage-dev) docker-compose -f docker-compose.stage.yml pull && docker-compose -f docker-compose.stage.yml -f docker-compose.dev.yml up -d;;
        *) print_up
    esac

}

makeProd(){
    docker tag vivaconagua/auth-backend:latest vivaconagua/auth-backend:latest_bak &&
    docker tag vivaconagua/mail-backend:latest vivaconagua/mail-backend:latest_bak &&
    docker tag vivaconagua/run4w-backend:latest vivaconagua/run4w-backend:latest_bak &&
    docker tag vivaconagua/team-backend:latest vivaconagua/team-backend:latest_bak &&
    docker tag vivaconagua/payment-backend:latest vivaconagua/payment-backend:latest_bak &&
    docker tag vivaconagua/auth-backend:stage vivaconagua/auth-backend:latest &&
    docker tag vivaconagua/mail-backend:stage vivaconagua/mail-backend:latest &&
    docker tag vivaconagua/run4w-backend:stage vivaconagua/run4w-backend:latest &&
    docker tag vivaconagua/team-backend:stage vivaconagua/team-backend:latest &&
    docker tag vivaconagua/payment-backend:stage vivaconagua/payment-backend:latest &&
    docker push vivaconagua/auth-backend:latest &&
    docker push vivaconagua/mail-backend:latest &&
    docker push vivaconagua/run4w-backend:latest &&
    docker push vivaconagua/team-backend:latest &&
    docker push vivaconagua/payment-backend:latest 
}


case $1 in 
    copy) copyConfig $2;;
    initNet) init_network ;;
    initDev) init_dev;;
    up) up $2 ;;
    update) update $2;;
    admin) admin;;
    network) init_network;;
    help) print_help;;
    switch) switch $2 $3 ;;
    backup) backup ;;
    makeProd) makeProd ;;
    *) print_help
esac
