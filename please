#!/bin/bash

source .env


print_help() {
    echo "please script for handling the vca api docker"
    echo "Syntax: please [command] [options] [service/all]"
    echo "commands:"
    echo "  copy <service>    Copy a scripts. Helpfull and buggy"
    echo "  up [dev/prod]     Set up the api. Used DEPLOY_MODE from .env if no option is set"
    echo "  network           Initial docker network"
    echo "  initDev           Initial dev nginx"
}

init_dev(){
    cp ./config/nginx/prod/conf/* ./config/nginx/dev/conf/
}

admin() {
    docker-compose exec auth-backend bash -c 'curl http://localhost:1323/admin/app'
    docker-compose exec mail-backend bash -c 'curl http://localhost:1323/admin/email/init'
}

init_network() {
    docker network create -d bridge --subnet 172.4.8.0/21 domain_net &&
    docker network create -d bridge --subnet 172.4.16.0/21 db_net &&
    docker network create -d bridge --subnet 172.4.24.0/21 api_net
}

copyConfig() {
    cat ${REPO_PATH}/${1}/config/docker-compose.prod.yml >> docker-compose.api.yml &&
    cp ${REPO_PATH}/${1}/config/${1}.location ./config/nginx/conf/
}

print_up(){
    echo "DEPLOY_MODE not set or not supported. Use .env file or add dev/prod option."
}
up() {
    if [ -z ${1+x} ];
    then
        mode=${DEPLOY_MODE}
    else 
        mode=${1}
    fi
    case ${mode} in
        dev) docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d;;
        prod) docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d;;
        *) print_up
    esac
}


case $1 in 
    copy) copyConfig $2;;
    initNet) init_network ;;
    initDev) init_dev;;
    up) up $2 ;;
    admin) admin;;
    network) init_network;;
    help) print_help;;
    *) print_help
esac
